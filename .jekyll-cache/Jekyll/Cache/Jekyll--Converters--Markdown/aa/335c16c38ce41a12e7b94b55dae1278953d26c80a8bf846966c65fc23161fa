I"F<h1 id="mac上使用svn">mac上使用svn</h1>
<blockquote>
  <p>svn命令行</p>
</blockquote>

<h2 id="mac-svn-命令行"><a href="https://www.cnblogs.com/snandy/p/4072857.html">Mac SVN 命令行</a></h2>

<blockquote>
  <p>Mac自带了SVN命令行，如我的升级到10.10（OSX yosemite）后命令行版本为1.7.10</p>
</blockquote>

<p><img src="https://images0.cnblogs.com/blog/114013/201411/040934442208146.png" alt="img" /></p>

<h4 id="常用命令">常用命令</h4>

<p><strong>1、</strong> 查看s v n库有哪些目录</p>

<p><code class="highlighter-rouge">svn list svn://syno10c894348c8c.iok.la/C城轨云-文档</code></p>

<p><strong>2、</strong>将文件checkout到本地目录</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn checkout path（path是服务器上的目录）``例如：svn checkout svn:``//192.168.1.1/pro/domain``简写：svn co
</code></pre></div></div>

<p><strong>3、</strong>往版本库中添加新的文件</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn add file``例如：svn add test.php(添加test.php)``svn add *.php(添加当前目录下所有的php文件)
</code></pre></div></div>

<p><strong>4、</strong>将改动的文件提交到版本库</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn commit -m “LogMessage“ [-N] [--no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)``例如：svn commit -m “add test file ``for` `my test“ test.php``简写：svn ci
</code></pre></div></div>

<p><strong>5、</strong>加锁/解锁</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn lock -m “LockMessage“ [--force] PATH``例如：svn lock -m “lock test file“ test.php``svn unlock PATH
</code></pre></div></div>

<p><strong>6、</strong>更新到某个版本</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn update -r m path``例如：``svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。``svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)``svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)``简写：svn up
</code></pre></div></div>

<p><strong>7、</strong>查看文件或者目录状态</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1）svn status path（目录下的文件和子目录的状态，正常状态不显示）``【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】``2）svn status -v path(显示文件和子目录状态)``第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。``注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。``简写：svn st
</code></pre></div></div>

<p><strong>8、</strong>删除文件</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn ``delete` `path -m “``delete` `test fle“``例如：svn ``delete` `svn:``//192.168.1.1/pro/domain/test.php -m “delete test file”``或者直接svn ``delete` `test.php 然后再svn ci -m ‘``delete` `test file‘，推荐使用这种``简写：svn (del, remove, rm)
</code></pre></div></div>

<p><strong>9、</strong>查看日志</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn log path``例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化
</code></pre></div></div>

<p><strong>10、</strong>查看文件详细信息</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn info path``例如：svn info test.php
</code></pre></div></div>

<p><strong>11、</strong>比较差异</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn diff path(将修改的文件与基础版本比较)``例如：svn diff test.php``svn diff -r m:n path(对版本m和版本n比较差异)``例如：svn diff -r 200:201 test.php``简写：svn di
</code></pre></div></div>

<p><strong>12、</strong>将两个版本之间的差异合并到当前文件</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn merge -r m:n path``例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）
</code></pre></div></div>

<p><strong>13、</strong>SVN 帮助</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn help``svn help ci
</code></pre></div></div>

<p><strong>14、</strong>版本库下的文件和目录列表</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn list path``显示path目录下的所有属于版本库的文件和目录``简写：svn ls
</code></pre></div></div>

<p><strong>15、</strong>创建纳入版本控制下的新目录</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn mkdir: 创建纳入版本控制下的新目录。``用法: 1、mkdir PATH…``2、mkdir URL…``创建版本控制的目录。``1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增``调度，以待下一次的提交。``2、每个以URL指定的目录，都会透过立即提交于仓库中创建。``在这两个情况下，所有的中间目录都必须事先存在
</code></pre></div></div>

<p><strong>16、</strong>恢复本地修改</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:``用法: revert PATH…``注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复``被删除的目录
</code></pre></div></div>

<p><strong>17、</strong>代码库URL变更</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn ``switch` `(sw): 更新工作副本至不同的URL。``用法: 1、``switch` `URL [PATH]``2、``switch` `–relocate FROM TO [PATH...]` `1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将``服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的``方法。``2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动``(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用``这个命令更新工作副本与仓库的对应关系。
</code></pre></div></div>

<p><strong>18、</strong>解决冲突</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn resolved: 移除工作副本的目录或文件的“冲突”状态。``用法: resolved PATH…``注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的``相关文件，然后让 PATH 可以再次提交。
</code></pre></div></div>
:ET